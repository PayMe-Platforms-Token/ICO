/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PaymeTokenVesting {
  export type VestingScheduleStruct = {
    initialized: PromiseOrValue<boolean>;
    beneficiary: PromiseOrValue<string>;
    cliff: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    slicePeriodSeconds: PromiseOrValue<BigNumberish>;
    revocable: PromiseOrValue<boolean>;
    amountTotal: PromiseOrValue<BigNumberish>;
    released: PromiseOrValue<BigNumberish>;
    revoked: PromiseOrValue<boolean>;
    releaseAtTGE: PromiseOrValue<boolean>;
  };

  export type VestingScheduleStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    initialized: boolean;
    beneficiary: string;
    cliff: BigNumber;
    start: BigNumber;
    duration: BigNumber;
    slicePeriodSeconds: BigNumber;
    revocable: boolean;
    amountTotal: BigNumber;
    released: BigNumber;
    revoked: boolean;
    releaseAtTGE: boolean;
  };
}

export interface PaymeTokenVestingInterface extends utils.Interface {
  functions: {
    "computeNextVestingScheduleIdForHolder(address)": FunctionFragment;
    "computeReleasableAmount(bytes32)": FunctionFragment;
    "computeVestingScheduleIdForAddressAndIndex(address,uint256)": FunctionFragment;
    "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256,bool)": FunctionFragment;
    "crowdsalesAddress()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getLastVestingScheduleForHolder(address)": FunctionFragment;
    "getTGEOpeningTime()": FunctionFragment;
    "getTgeTotalAmount()": FunctionFragment;
    "getToken()": FunctionFragment;
    "getTotalInvestmentAmountBalance()": FunctionFragment;
    "getVestingIdAtIndex(uint256)": FunctionFragment;
    "getVestingSchedule(bytes32)": FunctionFragment;
    "getVestingScheduleByAddressAndIndex(address,uint256)": FunctionFragment;
    "getVestingSchedulesCount()": FunctionFragment;
    "getVestingSchedulesCountByBeneficiary(address)": FunctionFragment;
    "getVestingSchedulesTotalAmount()": FunctionFragment;
    "getWithdrawableAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "release(bytes32,uint256)": FunctionFragment;
    "releaseForTGE(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "setCrowdsaleAddress(address)": FunctionFragment;
    "tgeOpeningTime()": FunctionFragment;
    "tgePercent()": FunctionFragment;
    "tgeTokenParticipants(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeNextVestingScheduleIdForHolder"
      | "computeReleasableAmount"
      | "computeVestingScheduleIdForAddressAndIndex"
      | "createVestingSchedule"
      | "crowdsalesAddress"
      | "getCurrentTime"
      | "getLastVestingScheduleForHolder"
      | "getTGEOpeningTime"
      | "getTgeTotalAmount"
      | "getToken"
      | "getTotalInvestmentAmountBalance"
      | "getVestingIdAtIndex"
      | "getVestingSchedule"
      | "getVestingScheduleByAddressAndIndex"
      | "getVestingSchedulesCount"
      | "getVestingSchedulesCountByBeneficiary"
      | "getVestingSchedulesTotalAmount"
      | "getWithdrawableAmount"
      | "owner"
      | "release"
      | "releaseForTGE"
      | "renounceOwnership"
      | "revoke"
      | "setCrowdsaleAddress"
      | "tgeOpeningTime"
      | "tgePercent"
      | "tgeTokenParticipants"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdsalesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastVestingScheduleForHolder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTGEOpeningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTgeTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalInvestmentAmountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingIdAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseForTGE",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrowdsaleAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tgeOpeningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tgePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tgeTokenParticipants",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdsalesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastVestingScheduleForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTGEOpeningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTgeTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvestmentAmountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseForTGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCrowdsaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tgeOpeningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tgePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tgeTokenParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(uint256)": EventFragment;
    "Revoked()": EventFragment;
    "TokenReleasedAtTGE(address,uint256)": EventFragment;
    "VestingScheduleCreated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReleasedAtTGE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingScheduleCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReleasedEventObject {
  amount: BigNumber;
}
export type ReleasedEvent = TypedEvent<[BigNumber], ReleasedEventObject>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export interface RevokedEventObject {}
export type RevokedEvent = TypedEvent<[], RevokedEventObject>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface TokenReleasedAtTGEEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type TokenReleasedAtTGEEvent = TypedEvent<
  [string, BigNumber],
  TokenReleasedAtTGEEventObject
>;

export type TokenReleasedAtTGEEventFilter =
  TypedEventFilter<TokenReleasedAtTGEEvent>;

export interface VestingScheduleCreatedEventObject {
  arg0: string;
}
export type VestingScheduleCreatedEvent = TypedEvent<
  [string],
  VestingScheduleCreatedEventObject
>;

export type VestingScheduleCreatedEventFilter =
  TypedEventFilter<VestingScheduleCreatedEvent>;

export interface PaymeTokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymeTokenVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeNextVestingScheduleIdForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeReleasableAmount(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createVestingSchedule(
      iBeneficiary: PromiseOrValue<string>,
      iStart: PromiseOrValue<BigNumberish>,
      iCliff: PromiseOrValue<BigNumberish>,
      iDuration: PromiseOrValue<BigNumberish>,
      iSlicePeriodSeconds: PromiseOrValue<BigNumberish>,
      iRevocable: PromiseOrValue<boolean>,
      iAmount: PromiseOrValue<BigNumberish>,
      iReleaseAtTGE: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crowdsalesAddress(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastVestingScheduleForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PaymeTokenVesting.VestingScheduleStructOutput]>;

    getTGEOpeningTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTgeTotalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getTotalInvestmentAmountBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVestingSchedule(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PaymeTokenVesting.VestingScheduleStructOutput]>;

    getVestingScheduleByAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PaymeTokenVesting.VestingScheduleStructOutput]>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestingSchedulesCountByBeneficiary(
      iBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseForTGE(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCrowdsaleAddress(
      icrowdsalesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tgeOpeningTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeTokenParticipants(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  computeNextVestingScheduleIdForHolder(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  computeReleasableAmount(
    vestingScheduleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeVestingScheduleIdForAddressAndIndex(
    holder: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createVestingSchedule(
    iBeneficiary: PromiseOrValue<string>,
    iStart: PromiseOrValue<BigNumberish>,
    iCliff: PromiseOrValue<BigNumberish>,
    iDuration: PromiseOrValue<BigNumberish>,
    iSlicePeriodSeconds: PromiseOrValue<BigNumberish>,
    iRevocable: PromiseOrValue<boolean>,
    iAmount: PromiseOrValue<BigNumberish>,
    iReleaseAtTGE: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crowdsalesAddress(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getLastVestingScheduleForHolder(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

  getTGEOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

  getTgeTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getTotalInvestmentAmountBalance(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingIdAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVestingSchedule(
    vestingScheduleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

  getVestingScheduleByAddressAndIndex(
    holder: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

  getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingSchedulesCountByBeneficiary(
    iBeneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingSchedulesTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    vestingScheduleId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseForTGE(
    vestingScheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    vestingScheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCrowdsaleAddress(
    icrowdsalesAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tgeOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

  tgePercent(overrides?: CallOverrides): Promise<BigNumber>;

  tgeTokenParticipants(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    computeNextVestingScheduleIdForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    computeReleasableAmount(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createVestingSchedule(
      iBeneficiary: PromiseOrValue<string>,
      iStart: PromiseOrValue<BigNumberish>,
      iCliff: PromiseOrValue<BigNumberish>,
      iDuration: PromiseOrValue<BigNumberish>,
      iSlicePeriodSeconds: PromiseOrValue<BigNumberish>,
      iRevocable: PromiseOrValue<boolean>,
      iAmount: PromiseOrValue<BigNumberish>,
      iReleaseAtTGE: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    crowdsalesAddress(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getLastVestingScheduleForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

    getTGEOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTgeTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getTotalInvestmentAmountBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVestingSchedule(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

    getVestingScheduleByAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PaymeTokenVesting.VestingScheduleStructOutput>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesCountByBeneficiary(
      iBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    release(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseForTGE(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrowdsaleAddress(
      icrowdsalesAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tgeOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgePercent(overrides?: CallOverrides): Promise<BigNumber>;

    tgeTokenParticipants(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Released(uint256)"(amount?: null): ReleasedEventFilter;
    Released(amount?: null): ReleasedEventFilter;

    "Revoked()"(): RevokedEventFilter;
    Revoked(): RevokedEventFilter;

    "TokenReleasedAtTGE(address,uint256)"(
      beneficiary?: null,
      amount?: null
    ): TokenReleasedAtTGEEventFilter;
    TokenReleasedAtTGE(
      beneficiary?: null,
      amount?: null
    ): TokenReleasedAtTGEEventFilter;

    "VestingScheduleCreated(bytes32)"(
      arg0?: null
    ): VestingScheduleCreatedEventFilter;
    VestingScheduleCreated(arg0?: null): VestingScheduleCreatedEventFilter;
  };

  estimateGas: {
    computeNextVestingScheduleIdForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeReleasableAmount(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVestingSchedule(
      iBeneficiary: PromiseOrValue<string>,
      iStart: PromiseOrValue<BigNumberish>,
      iCliff: PromiseOrValue<BigNumberish>,
      iDuration: PromiseOrValue<BigNumberish>,
      iSlicePeriodSeconds: PromiseOrValue<BigNumberish>,
      iRevocable: PromiseOrValue<boolean>,
      iAmount: PromiseOrValue<BigNumberish>,
      iReleaseAtTGE: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crowdsalesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getLastVestingScheduleForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTGEOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTgeTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalInvestmentAmountBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedule(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingScheduleByAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingSchedulesCountByBeneficiary(
      iBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseForTGE(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCrowdsaleAddress(
      icrowdsalesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tgeOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgePercent(overrides?: CallOverrides): Promise<BigNumber>;

    tgeTokenParticipants(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeNextVestingScheduleIdForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeReleasableAmount(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeVestingScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVestingSchedule(
      iBeneficiary: PromiseOrValue<string>,
      iStart: PromiseOrValue<BigNumberish>,
      iCliff: PromiseOrValue<BigNumberish>,
      iDuration: PromiseOrValue<BigNumberish>,
      iSlicePeriodSeconds: PromiseOrValue<BigNumberish>,
      iRevocable: PromiseOrValue<boolean>,
      iAmount: PromiseOrValue<BigNumberish>,
      iReleaseAtTGE: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crowdsalesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastVestingScheduleForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTGEOpeningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTgeTotalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalInvestmentAmountBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedule(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingScheduleByAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesCountByBeneficiary(
      iBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedulesTotalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseForTGE(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      vestingScheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCrowdsaleAddress(
      icrowdsalesAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tgeOpeningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeTokenParticipants(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
